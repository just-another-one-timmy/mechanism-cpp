#ifndef COMPMANAGER_H_INCLUDED
#define COMPMANAGER_H_INCLUDED

#include <string>
#include <map>
using namespace std;

//#include "..\tinyxml\tinyxml.h"

#include "TestMyself.h"

#include "Connector.h"
#include "KPair.h"
#include "Segment.h"

//#include "GroupManager.h"
/**
@brief Менеджер компонентов
@details Класс нужен для более удобного управления составляющими механизма.
Пользователю можно не объявлять все переменные самому, достаточно вызвать нужные методы этого класса.

В целом, класс позволяет добавлять:
- именованые сегменты
- именованые коннекторы (с указанием имени сегмента, на который нужно добавить коннектор)
- именованые кинематические пары (с указанием имён коннекторов, с которыми нужно связать КП)
- именованые силы (с указанием коннектора, который будет являться точкой приложения силы)

@author jtim
*/
class CompManager
{
    private:
        map <string, Connector*> connectors;
        map <string, KPair*>     kpairs;
        map <string, Segment*>   segments;
        map <string, Force *>    forces;

        // рекурсивный анализ узлов XML
        //void RecAnalyze(TiXmlNode *pParent);
        //void ProcessXmlElem(TiXmlElement* pElem);
    public:
        CompManager();

        /**
        @brief Добавляет сегмент
        @details Метод делает в точности следующее:
                <ol>
                <li> Выделяет память для нового сегмента и создает его
                <li> Инициализирует поля созданного сегмента
                <li> Добавляет сегмент во внутренний АМ сегментов (private) механизма
                <li> Создает новый коннектор с именем "имя_сегмента+cP" (без кавычек) и делает его полюсом сегмента
                     (т.е. в polus записывает указатель на новосозданный коннектор
                <li> Создает новый LinearTF и записывает указатель на него в linear
                </ol>
        @param name Имя создаваемого сегмента
        @param mass Масса сегмента
        @param rot_inertia Вращательный момент
        @return Указатель на созданный сегмент
        @bug Нет проверки, был ли уже сегмент с таким именем.
        */
        Segment *AddSegment(string name, double mass = 1000, double rot_inertia = 1000);

        /**
        @brief Удаляет сегмент
        @details Метод делает следующее:
            <ol>
            <li> Ищет данный сегмент по имени во внутреннем АМ механизма
            <li> Проходится по списку коннекторов данного сегмента и удаляет их из списка коннекторов механизма
            <li> Удаляет сегмент (освобождает память)
            <li> Удаляет указатель на сегмент из списка сегментов механизма
            </ol>

            Важно заметить, что освобождение памяти, выделенной для коннекторов, происходит в деструкторе сегмента.
            Поэтому в данном методе всего лишь удаляются элементы списка коннекторов механизма (указатели).
        @param name Имя удаляемого сегмента
        @bug Нет проверки, был ли в механизме сегмент с таким именем.
        */
        void DelSegment(string name);
        /**
        @brief Ищет сегмент по имени
        @details Ищет сегмент с нужным именем во внутреннем АМ механизма
        @param name Имя сегмента для поиска
        @return Указатель на сегмент с именем name
        @bug Нет проверки, был ли в механизме сегмент с таким именем.
        */
        Segment *GetSegment(string name);

        /**
        @brief Добавляет центр масс для данного сегмента
        @details Более детально, метод делает следующее:
            <ol>
            <li> Создает новый ConnectorTurn с именем seg_name+"cS", сохраняет указатель на него во внутреннем АМ коннекторов механизма
            <li> Ищет сегмент с именем seg_name, присваивает его полю cmass указатель на созданный коннектор
            <li> Создает LinearTF и записывает указатель на него в поле linear созданного коннектора
            <li> Создает новую силу гравитационного типа с именем "G_"+seg_name, равную силе mg (сила тяжести) для данного сегмента
            <li> Добавляет созданную силу во внутренний АМ механизма
            <li> Свойству linear данной силы присваивает linear коннектора, созданного в п1.
            </ol>
        @param seg_name Имя сегмента, для которого создается ЦМ
        @param ro, phi Координаты ЦМ в полярной системе
        @return Указатель на коннектор, созданный в качестве ЦМ
        */
        Connector *AddCMass(string seg_name, double ro, double phi);

        /**
        @brief Добавляет кинематическую пару вращательного типа
        @details Метод выполняет следующее:
            <ol>
            <li> Создает КП поступательного типа
            <li> Связывает ее с коннекторами c1name, c2name
            <li> Помещает КП во внутренний АМ механизма
            <li> Помещает силы реакции, созданные в конструкторе КП, во внутренний АМ механизма
            </ol>
        @param name Имя, которое будет присвоено КП
        @param c1name Имя первого коннектора
        @param c2name Имя второго коннектора
        @return Указатель на созданную КП
        @exception "AddKPTurn: i1->second->Type() != CONNECTOR_TYPE_TURN" В случае неподходящего типа первого коннетора.
        @exception "AddKPTurn: i2->second->Type() != CONNECTOR_TYPE_TURN" В случае неподходящего типа второго коннетора.
        @bug Не проверяется, действительно ли есть такие коннекторы в механизме
        */
        KPair *AddKPTurn(string name, string c1name, string c2name);

        /**
        @brief Добавляет кинематическую пару поступательного типа
        @details Метод выполняет следующее:
            <ol>
            <li> Создает КП поступательного типа
            <li> Связывает ее с коннекторами c1name, c2name
            <li> Помещает КП во внутренний АМ механизма
            <li> Помещает силы реакции, созданные в конструкторе КП, во внутренний АМ механизма
            </ol>
        @param name Имя, которое будет присвоено КП
        @param c1name Имя первого коннектора
        @param c2name Имя второго коннектора
        @return Указатель на созданную КП
        @exception "AddKPSliding: i1->second->Type() != CONNECTOR_TYPE_SLIDING" В случае неподходящего типа первого коннетора.
        @exception "AddKPSliding: i2->second->Type() != CONNECTOR_TYPE_SLIDING" В случае неподходящего типа второго коннетора.
        @bug Не проверяется, действительно ли есть такие коннекторы в механизме
        */
        KPair *AddKPSliding(string name, string c1name, string c2name);

        /**
        @brief Ищет КП по имени
        @details Ищет КП по имени во внутреннем АМ механизме
        @param name Имя КП
        @return Указатель на найденную КП
        @bug Не проверяется, есть ли такая КП во внутреннем АМ механизма
        */
        KPair *GetKPair(string name);

        /**
        @brief Удаляет КП по имени
        @details Удаляет КП из внутреннего АМ механизма, вызывает деструктор КП
        @param name Имя удаляемой КП
        @bug Нет проверки, была ли такая КП в механизме
        */
        void DelKPair(string name);

        /**
        @brief Добавляет вращательный коннектор
        @details Происходит следующее:
            <ol>
            <li>Создается новый коннектор
            <li>Ему присваивается имя
            <li>Ищется нужный сегмент, указатель на коннектор добавляется в список сегмента
            <li>Коннектор добавляется во внутренний АМ механизма
            <li>Устанавливаются свойства коннектора
            </ol>
        @param name Имя, которое будет присвоено коннектору
        @param segment_name Имя звена, на котором будет размещен коннектор
        @param ro, phi Координаты коннектора в полярной системе
        @return Указатель на созданный коннектор
        @bug Нет проверок, был ли такой сегмент в механизме и не было ли такого коннектора в механизме
        */
        Connector * AddConnectorTurn(string name, string segment_name, double ro, double phi);

        /**
        @brief Добавляет поступательный коннектор
        @details Происходит следующее:
            <ol>
            <li>Создается новый коннектор
            <li>Ему присваивается имя
            <li>Ищется нужный сегмент, указатель на коннектор добавляется в список сегмента
            <li>Коннектор добавляется во внутренний АМ механизма
            <li>Устанавливаются свойства коннектора
            <li>Для коннектора создается новый LinearTF
            </ol>
        @param name Имя, которое будет присвоено коннектору
        @param segment_name Имя звена, на котором будет размещен коннектор
        @param ro, phi Координаты коннектора в полярной системе
        @param alpha ???????????????????????????????????????????
        @return Указатель на созданный коннектор
        @bug Нет проверок, был ли такой сегмент в механизме и не было ли такого коннектора в механизме
        @warning Я не знаю, что делает параметр alpha
        */
        Connector * AddConnectorSliding(string name, string segment_name, double ro, double phi, double alpha);

        /**
        @brief Добавляет вращательный коннектор
        @details Обертка для метода AddConnectorTurn, но сюда передаются координаты в декартовой системе.
        @param name Имя, которое будет присвоено коннектору
        @param segment_name Имя звена, на котором будет размещен коннектор
        @param x, y Координаты коннектора в декартовой системе
        @return Указатель на созданный коннектор
        */
        Connector * AddConnectorTurnD(string name, string segment_name, double x, double y);

        /**
        @brief Добавляет поступательный коннектор
        @details Обертка для метода AddConnectorSliding, но сюда передаются координаты в декартовой системе.
        @param name Имя, которое будет присвоено коннектору
        @param segment_name Имя звена, на котором будет размещен коннектор
        @param x, y Координаты коннектора в декартовой системе
        @return Указатель на созданный коннектор
        */
        Connector * AddConnectorSlidingD(string name, string segment_name, double x, double y, double alpha);


        /**
        @brief Ищет коннектор по имени
        @details Ищет коннектор во внутреннем АМ механизма по имени.
        @param name Имя коннектора, который нужно найти
        @return Указатель на коннектор с именем name
        @bug Если коннектора с таким именем нет, то будет плохо
        */
        Connector * GetConnector(string name);

        /**
        @brief Удаляет коннектор по имени
        @details <ol>
                 <li> Ищет коннектор с таким именем во внутреннем АМ механизма
                 <li> Удаляет коннектор из списка сегмента (в коннекторе есть указатель на сегмент, содеержащий этот коннектор)
                 <li> Удаляет коннектор из внутреннего АМ механизма
                 <li> Вызывает деструктор коннектора
                 </ol>
        @param name Имя коннектора, который надо удалить
        @bug Если коннектора с таким именем нет, то будет плохо
        */
        void DelConnector(string name);

        /**
        @brief Добавляет силу с нужными параметрами
        @details <ol>
                 <li> Ищет коннектор с именем con_name
                 <li> Проверяет тип коннектора, если не CONNECTOR_TYPE_TURNING - исключение
                 <li> Создает новую силу с нужными параметрами, тип силы - FORCE_TYPE_TECHNO
                 <li> Добавляет силу во внутренний АМ механизма
                 <li> Делает это: f->linear = ct->linear; f->turn   = &(s->turn);
                 </ol>
        @param name Имя силы, которая будет создана
        @param con_name Имя коннектора, к которому будет приложена сила
        @param fx, fy Проекции вектора силы на оси координат
        @param torque Вращательный момент (??? точно?)
        @return Указатель на созданную силу
        @bug Не проверяется, был ли коннектор с именем con_name, не было ли силы с именем name
        @exception "Force * CompManager::AddTechnoForce: c->Type() != CONNECTOR_TYPE_TURN" Если тип коннектора не CONNECTOR_TYPE_TURN
        */
        Force * AddTechnoForce(string name, string con_name, double fx, double fy, double torque);

        /**
        @brief Ищет силу по имени
        @details Ищет силу по имени во внутреннем АМ механизма
        @param name Имя силы, которую нужно найти
        @return Указатель на найденную силу
        @bug Если силы с таким именем нет, будет плохо
        */
        Force * GetForce(string name);
        /**
        @brief Удаляет силу по имени
        @details <ol>
                 <li> Ищет силу в списке сил механизма
                 <li> Сила приложена к коннектору, коннектор лежит на звене. Сила добавлялась в список сил звена. Сейчас она оттуда удаляется.
                 <li> Сила удаляется из внутреннего АМ механизма
                 <li> Вызывается деструктор
                 </ol>
        @param name Имя силы, которую нужно удалить
        @bug Не проверяется, была ли такая сила в механизме. Не проверяется, был ли тип силы FORCE_TYPE_TECHNO
        */
        void DelTechnoForce(string name);

        /**
        @brief Сбросить флаги "Вычислено"
        @details Проходит по всем силам и коннекторам механизма, ставит им флаг calculated в false.
                 Это нужно делать перед тем, как вызывать процедуру просчета механизма.
        */
        void UnsetCalculated();

        /**
        @brief Деструктор механизма
        @details <ol>
                 <li> Для каждого звена - удаляет его коннекторы, а потом само звено (вызывает деструкторы)
                 <li> Удаляет все оставшиеся коннекторы (вызывая деструктор)
                 <li> Удаляет все КП (вызывая деструктор)
                 <li> Очищает внутренние АМ звеньев, коннекторов, КП и сил
                 </ol>
        */
        ~CompManager();

        friend void PrintCompManagerInfo(CompManager *cm, int level);

        /**
        @brief Возвращает АМ сегментов
        @bug У пользователя есть возможность удалить сегмент, узнав его указатель с помощью этого АМ. Будет плохо.
        */
        const map<string, Segment*> GetSegments();
        /**
        @brief Возвращает АМ КП
        @bug У пользователя есть возможность удалить КП, узнав её указатель с помощью этого АМ. Будет плохо.
        */
        const map<string, KPair*> GetKPairs();
};

#endif // COMPMANAGER_H_INCLUDED
